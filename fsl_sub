#!/bin/sh

# Copyright (C) 2007-2010 University of Oxford
# Authors: Dave Flitney, Stephen Smith and Matthew Webster

#   Part of FSL - FMRIB's Software Library
#   http://www.fmrib.ox.ac.uk/fsl
#   fsl@fmrib.ox.ac.uk
#   
#   Developed at FMRIB (Oxford Centre for Functional Magnetic Resonance
#   Imaging of the Brain), Department of Clinical Neurology, Oxford
#   University, Oxford, UK
#   
#   
#   LICENCE
#   
#   FMRIB Software Library, Release 5.0 (c) 2012, The University of
#   Oxford (the "Software")
#   
#   The Software remains the property of the University of Oxford ("the
#   University").
#   
#   The Software is distributed "AS IS" under this Licence solely for
#   non-commercial use in the hope that it will be useful, but in order
#   that the University as a charitable foundation protects its assets for
#   the benefit of its educational and research purposes, the University
#   makes clear that no condition is made or to be implied, nor is any
#   warranty given or to be implied, as to the accuracy of the Software,
#   or that it will be suitable for any particular purpose or for use
#   under any specific conditions. Furthermore, the University disclaims
#   all responsibility for the use which is made of the Software. It
#   further disclaims any liability for the outcomes arising from using
#   the Software.
#   
#   The Licensee agrees to indemnify the University and hold the
#   University harmless from and against any and all claims, damages and
#   liabilities asserted by third parties (including claims for
#   negligence) which arise directly or indirectly from the use of the
#   Software or the sale of any products based on the Software.
#   
#   No part of the Software may be reproduced, modified, transmitted or
#   transferred in any form or by any means, electronic or mechanical,
#   without the express permission of the University. The permission of
#   the University is not required if the said reproduction, modification,
#   transmission or transference is done without financial return, the
#   conditions of this Licence are imposed upon the receiver of the
#   product, and all original and amended source code is included in any
#   transmitted product. You may be held legally responsible for any
#   copyright infringement that is caused or encouraged by your failure to
#   abide by these terms and conditions.
#   
#   You are not permitted under this Licence to use this Software
#   commercially. Use for which any financial return is received shall be
#   defined as commercial use, and includes (1) integration of all or part
#   of the source code or the Software into a product for sale or license
#   by or on behalf of Licensee to third parties or (2) use of the
#   Software or any derivative of it for research with the final aim of
#   developing software products for sale or license to a third party or
#   (3) use of the Software or any derivative of it for research with the
#   final aim of developing non-software products for sale or license to a
#   third party, or (4) use of the Software to provide any service to an
#   external organisation for which payment is received. If you are
#   interested in using the Software commercially, please contact Isis
#   Innovation Limited ("Isis"), the technology transfer company of the
#   University, to negotiate a licence. Contact details are:
#   innovation@isis.ox.ac.uk quoting reference DE/9564.

###########################################################################
# Edit this file in order to setup FSL to use your local compute
# cluster.
###########################################################################

fslcluster_cell_settings=/usr/local/share/sge/default/common/settings.sh
# Domain mail should be sent to if necessary. The complete address will be
# `whoami`@${fslcluster_mailto_domain}
fslcluster_mailto_domain=mpib-berlin.mpg.de
# When should the cluster engine send status email (see qsub -m ... docs)
# Don't send email by default; can be overidden by FSLCLUSTER_MAILOPTS
# environment variable
fslcluster_mailopts="n"


###########################################################################
# The following section determines what to do when fsl_sub is called
# by an FSL program. If it finds a local cluster if will pass the
# commands onto the cluster. Otherwise it will run the commands
# itself. There are two values for the METHOD variable, "SGE" and
# "NONE". You should setup the tests to look for whether the calling
# computer can see your cluster setup scripts, and run them (if that's
# what you want, i.e. if you haven't already run them in the user's
# login scripts). Note that these tests look for the environment
# variable SGE_ROOT, which a user can unset if they don't want the
# cluster to be used.
###########################################################################

# try autodetecting SGE, but see ovveride switch FSLPARALLEL below
METHOD=SGE
if [ "x$SGE_ROOT" = "x" ] ; then
    if [ -f ${fslcluster_cell_settings} ] ; then
	. ${fslcluster_cell_settings}
    elif [ -f /usr/local/sge/default/common/settings.sh ] ; then
	. /usr/local/sge/default/common/settings.sh
    else
	METHOD=NONE
    fi
fi

# define the default 'qsub' implementation to be used for cluster submission
qsub_cmd="qsub"

FSLPARALLEL="torque"    # FIXME: move this out of here
# Allow to override the above automatic detection result with FSLPARALLEL
if [ -n "$FSLPARALLEL" ] ; then
    # Whenever FSLPARALLEL is set enfore using SGE even if no SGE_ROOT is set
    # which, for example, is the case on Debian systems running SGE
    METHOD=SGE
    # TODO: move cluster engine detection here to be able to support more than
    #       just SGE
    if [ "$FSLPARALLEL" = "condor" ] ; then
        # if condor shall be used, simply switch to Condor's qsub emulation
        qsub_cmd="condor_qsub"
    fi
    if [ "$FSLPARALLEL" = "torque" ] ; then
        METHOD=TORQUE
        qsub_cmd="qsub"
    fi
fi

# Allow overriding mail settings
if [ "x$FSLCLUSTER_MAILOPTS" != "x" ] ; then
    fslcluster_mailopts=${FSLCLUSTER_MAILOPTS}
fi

###########################################################################
# Don't change the following (but keep scrolling down!)
###########################################################################

POSIXLY_CORRECT=1
export POSIXLY_CORRECT
command=`basename $0`

usage ()
{
  cat <<EOF

$command V1.1 - wrapper for job control system such as SGE

Usage: $command [options] <command>

$command gzip *.img *.hdr
$command -q short.q gzip *.img *.hdr
$command -a darwin regscript rawdata outputdir ...

  -T <minutes>          Estimated job length in minutes, used to let SGE select
                        an appropriate queue
  -R <memorysize>       Additional memory requirements (default = unset )
  -q <queuename>        Possible values for <queuename> can be queried with
                        'qconf -sql'
  -a <arch-name>        Architecture [e.g., darwin or lx24-amd64]
  -p <job-priority>     Lower priority [0:-1024] default = 0
  -M <email-address>    Who to email, default = `whoami`@localhost
  -j <jid>              Place a hold on this task until job jid has completed
  -t <filename>         Specify a task file of commands to execute in parallel
  -c <batchsize>        Specify the number of commands associated with one task
                        ( default is 1 )
  -N <jobname>          Specify jobname as it will appear on queue
  -l <logdirname>       Where to output logfiles
  -m <mailoptions>      Change the SGE mail options, see qsub for details
  -z <output>           If <output> image or file already exists, do nothing and exit
  -F                    Use flags embedded in scripts to set SGE queuing options
  -s <pename>,<threads> Submit a multi-threaded task - requires a PE (<pename>) to be
                        configured for the requested queues.
                        <threads> specifies the number of threads to run
  -B                    block after job submission
  -v                    Verbose mode.
EOF

  exit 1
}

nargs=$#
if [ $nargs -eq 0 ] ; then
  usage
fi

set -- `getopt T:R:q:a:p:M:j:t:c:z:N:BFvm:l:s: $*`
result=$?
if [ $result != 0 ] ; then
  echo "What? Your arguments make no sense!"
fi

if [ $nargs -eq 0 ] || [ $result != 0 ] ; then
  usage
fi

###########################################################################
# If you have a Parallel Environment configured for OpenMP tasks then
# the variable omp_pe should be set to the name you have defined for that
# PE. The script will work out which queues have that PE setup on them.
# Note, we support openmp tasks even when Grid Engine is not in use.
###########################################################################

omp_pe='openmp'

###########################################################################
# The following sets up the default queue name, which you may want to
# change. It also sets up the basic emailing control.
###########################################################################

# SGE should already have a default queue
#queue=long.q
mailto=`whoami`@${fslcluster_mailto_domain}
MailOpts=${fslcluster_mailopts}


###########################################################################
# In the following, you might want to change the behaviour of some
# flags so that they prepare the right arguments for the actual
# cluster queue submission program, in our case "qsub".
#
# -a sets is the cluster submission flag for controlling the required
# hardware architecture (normally not set by the calling program)
#
# -p set the priority of the job - ignore this if your cluster
# environment doesn't have priority control in this way.
#
# -j tells the cluster not to start this job until cluster job ID $jid
# has completed. You will need this feature.
#
# -t will pass on to the cluster software the name of a text file
# containing a set of commands to run in parallel; one command per
# line.
#
# -N option determines what the command will be called when you list
# running processes.
#
# -l tells the cluster what to call the standard output and standard
# -error logfiles for the submitted program.
###########################################################################

if [ -z $FSLSUBVERBOSE ] ; then
    verbose=0
else
    verbose=$FSLSUBVERBOSE;
    echo "METHOD=$METHOD : args=$@" >&2
fi

block=0
scriptmode=0
chunksize=1     # do not remove me, we will divide by $chunksize later

while [ $1 != -- ] ; do
  case $1 in
    -z)
      if [ -e $2 -o `${FSLDIR}/bin/imtest $2` = 1 ] ; then
        exit 0
      fi
      shift;;
    -T)
      # qsub wants the time limit in seconds
      if [ $FSLPARALLEL = "torque" ] ; then
        job_timelimit="-l walltime=$(echo "$2 * 60" | bc)"
      else
        job_timelimit="-l h_rt=$(echo "$2 * 60" | bc)"
      fi
      shift;;
    -R)
      sge_memory="-l mem=$2"
      shift;;
    -q)
      queue="$2"
      if [ $FSLPARALLEL = "torque" ]; then
        qselect -Q $queue | grep -v "Unknown queue"
      else
        qconf -sql | grep ^$queue 2>&1 >/dev/null
      fi
      if [ $? -eq 1 ]; then
	    echo "Invalid queue specified!"
	    exit 127
      fi
      queue="-q "$queue
      shift;;
    -a)
      sge_arch=""
      # ignore -l arch for now
      if [ $FSLPARALLEL = "torque" ]; then
        shift;
      fi
      acceptable_arch=no
      available_archs=`qhost | tail -n +4 | awk '{print $2}' | sort | uniq`
      for a in $available_archs; do
	    if [ $2 = $a ] ; then
	      acceptable_arch=yes
	    fi
      done
      if [ $acceptable_arch = yes ]; then
	    sge_arch="-l arch=$2"
      else
	    echo "Sorry arch of $2 is not supported on this SGE configuration!"
	    echo "Should be one of:" $available_archs
	    exit 127
      fi
      shift;;
    -p)
      sge_priority="-p $2"
      shift;;
    -M)
      mailto=$2
      shift;;
    -j)
      jid=$2
      if [ $FSLPARALLEL = "torque" ]; then
        sge_hold="-W afterany:$jid"
      else
        sge_hold="-hold_jid $jid"
      fi
      shift;;
    -t)
      taskfile=$2
      tasks=`wc -l $taskfile | awk '{print $1}'`
      shift;;
    -c)
      chunksize=$2
      shift;;
    -N)
      JobName=$2;
      shift;;
    -m)
      MailOpts=$2;
      shift;;
    -l)
      LogOpts="-o $2 -e $2";
      LogDir="${2}/";
      mkdir -p $2;
      shift;;
    -F)
      scriptmode=1;
      if [ $FSLPARALLEL = "torque" ]; then
        echo "WARNING: This is torque, not SGE, therefore scriptmode"
        echo "         might behave unexpectedly some fsl scripts.  "
      fi
      ;;
    -v)
      verbose=1
      ;;
    -B)
      if [ $FSLPARALLEL = "torque" ]; then
        block=1
      else
        sge_block="-sync y"
      fi
      ;;
    -s)
      if [ $FSLPARALLEL = "torque" ]; then
        echo "Warning: requested -pe mode , might fail (this is torque, not SGE)"
      fi
      pe_string=$2;
      peName=`echo $pe_string | cut -d',' -f 1`
      peThreads=`echo $pe_string | cut -d',' -f 2`
      shift;;
  esac
  shift  # next flag
done
shift

###########################################################################
# Don't change the following (but keep scrolling down!)
###########################################################################

if [ "x$JobName" = x ] ; then 
    if [ "x$taskfile" != x ] ; then
	JobName=`basename $taskfile`
    else
	JobName=`basename $1`
    fi
fi

if [ "x$tasks" != "x" ] && [ ! -f "$taskfile" ] ; then
    echo $taskfile: invalid input!
    echo Should be a text file listing all the commands to run!
    exit -1
fi

if [ "x$tasks" != "x" ] && [ "x$@" != "x" ] ; then
    echo $@
    echo Spurious input after parsing command line!
    exit -1
fi

if [ "x$peName" != "x" ]; then
    # If the PE name is 'openmp' then limit the number of threads to those specified

    if [ "X$peName" = "Xomp_pe" ]; then
        OMP_NUM_THREADS=$peThreads
	export OMP_NUM_THREADS
    fi

fi

if [ "x$tasks" != "x" ] ; then
    # round up (tasks/chunksize)
    tasks=$(( ($tasks + ($chunksize - 1) ) / $chunksize ))
    sge_tasks="-t 1-$tasks"
fi

wait_for_torque() {
    echo "Waiting for jobs to finish."
    while(true); do
        sleep 30s
        qselect | grep "^$1" >/dev/null 2>&1
        if [ $? -ne 0 ]; then
            return
        fi
    done
}

case $METHOD in

###########################################################################
# The following is the main call to the cluster, using the "qsub" SGE
# program. If $tasks has not been set then qsub is running a single
# command, otherwise qsub is processing a text file of parallel
# commands.
###########################################################################

    TORQUE)

	if [ -n "$peName" ]; then
        if [ "$peName" != "omp_pe" ]; then
            echo "Error: Parallel Environment (SGE) other than OpenMP requested but NYI"
            exit -1
        else
            # emulating what I understand -pe does
            # OMP_NUM_THREADS has already been exported
            # there is no obvious barrier for thread number
            # ... this is weird
	        pe_options="-l nodes=1:ppn=$peThreads"
        fi
    fi
	if [ "x$tasks" = "x" ] ; then
	    if [ $scriptmode -ne 1 ] ; then
		    pbs_command="$qsub_cmd -V -d $PWD -r y $job_timelimit $queue $pe_options \
                         -M $mailto -N $JobName -m $MailOpts $LogOpts $sge_arch \
                         $sge_hold $sge_memory"

	    else
		    pbs_command="$qsub_cmd $LogOpts $sge_arch $sge_hold"
	    fi
	    if [ $verbose -eq 1 ] ; then
		    echo pbs_command: $pbs_command >&2
		    echo executing: $@ >&2
	    fi
        if [ $scriptmode -ne 1 ] ; then
            jobid=$( echo $@ | $pbs_command | awk -F. '{print $1}' )
        else
            jobid=$( $pbs_command $@ | awk -F. '{print $1}' )
        fi
        echo $jobid
        if [ $block -eq 1 ]; then
            wait_for_torque $jobid
        fi

    else
	    pbs_command="$qsub_cmd -V -d $PWD $job_timelimit $queue $pe_options -M $mailto -N $JobName -m $MailOpts $LogOpts $sge_arch $sge_hold $sge_tasks $sge_memory"
	    if [ $verbose -eq 1 ] ; then
		    echo pbs_command: $pbs_command >&2
		    echo control file: $taskfile >&2
	    fi
        echo 'chunk_beg=$(( (${PBS_ARRAYID} - 1) * '" $chunksize + 1 ))" > tmpjob
        echo 'chunk_end=$(( ${PBS_ARRAYID} * '" $chunksize ))" >> tmpjob
        echo 'cmd=$(sed -n -e "${chunk_beg},${chunk_end}p"' $taskfile ')' >> tmpjob
        echo '/bin/sh <<EOS' >> tmpjob
        echo '$cmd' >> tmpjob
        echo 'EOS' >> tmpjob
	    jobid=$( $pbs_command tmpjob | awk -F. '{print $1}' )
        echo $jobid
        if [ $block -eq 1 ]; then
            wait_for_torque $jobid
        fi
        rm -f tmpjob
    fi
    ;;


    SGE)
       ###########################################################################
       # Test Parallel environment options
       ###########################################################################
	if [ "x$peName" != x ]; then
            # Is this a configured PE?

	    qconf -spl | grep ^$peName 2>&1 >/dev/null

	    if [ $? -eq 1 ]; then
		echo $@
		echo "$peName is not a valid PE"
		exit -1
	    fi

            # Get a list of queues configured for this PE and confirm that the queue
            # we have submitted to has that PE set up.
	    qstat -g c -pe $peName 2>&1 >/dev/null
	    if [ $? -eq 1 ]; then
		echo "No parallel environments configured!"
		exit -1
	    fi

	    qstat -g c -pe $peName | sed '1,2d' | awk '{ print $1 }' | grep ^$queue 2>&1 >/dev/null

	    if [ $? -eq 1 ]; then
		echo $@
		echo "PE $peName is not configured on $queue"
		exit -1
	    fi

	    # The -w e option will result in the job failing if there are insufficient slots
        # on any of the cluster nodes
	    pe_options="-pe $peName $peThreads -w e"

	fi

	if [ "x$tasks" = "x" ] ; then
	    if [ $scriptmode -ne 1 ] ; then
		sge_command="$qsub_cmd -V -cwd -shell n -b y -r y $job_timelimit $queue $pe_options -M $mailto -N $JobName -m $MailOpts $LogOpts $sge_arch $sge_hold $sge_block $sge_memory"
	    else
		sge_command="$qsub_cmd $LogOpts $sge_arch $sge_hold $sge_block"
	    fi
	    if [ $verbose -eq 1 ] ; then
		echo sge_command: $sge_command >&2
		echo executing: $@ >&2
	    fi
	    exec $sge_command $@ | awk '{print $3}'
	else
	    sge_command="$qsub_cmd -V -cwd $job_timelimit $queue $pe_options -M $mailto -N $JobName -m $MailOpts $LogOpts $sge_arch $sge_hold $sge_tasks $sge_block $sge_memory"
	    if [ $verbose -eq 1 ] ; then
		echo sge_command: $sge_command >&2
		echo control file: $taskfile >&2
	    fi
        echo 'chunk_beg=$(( (${SGE_TASK_ID} - 1) * '" $chunksize + 1 ))" > tmpjob
        echo 'chunk_end=$(( ${SGE_TASK_ID} * '" $chunksize ))" >> tmpjob
        echo 'cmd=$(sed -n -e "${chunk_beg},${chunk_end}p"' $taskfile ')' >> tmpjob
        echo '/bin/sh <<EOS' >> tmpjob
        echo '$cmd' >> tmpjob
        echo 'EOS' >> tmpjob
	    exec $sge_command tmpjob | awk '{print $3}' | awk -F. '{print $1}'
	fi
	;;

###########################################################################
# Don't change the following - this runs the commands directly if a
# cluster is not being used.
###########################################################################

    NONE)
	if [ "x$tasks" = "x" ] ; then
	    if [ $verbose -eq 1 ] ; then 
		echo executing: $@ >&2
	    fi

	    /bin/sh <<EOF1 > ${LogDir}${JobName}.o$$ 2> ${LogDir}${JobName}.e$$
$@
EOF1
	    ERR=$?
	    if [ $ERR -ne 0 ] ; then
		cat ${LogDir}${JobName}.e$$ >&2
		exit $ERR
	    fi
	else
	    if [ $verbose -eq 1 ] ; then 
		echo "Running commands in: $taskfile" >&2
	    fi

	    n=1
	    while [ $n -le $tasks ] ; do
		line=`sed -n -e ''${n}'p' $taskfile`
		if [ $verbose -eq 1 ] ; then 
		    echo executing: $line >&2
		fi
		/bin/sh <<EOF2 > ${LogDir}${JobName}.o$$.$n 2> ${LogDir}${JobName}.e$$.$n
$line
EOF2
		n=`expr $n + 1`
	    done
	fi	
	echo $$
	;;

esac

###########################################################################
# Done.
###########################################################################
